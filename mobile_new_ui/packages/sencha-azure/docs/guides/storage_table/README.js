Ext.data.JsonP.storage_table({"guide":"<h1>Azure Storage: Table Storage REST APIs</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/storage_table-section-1'>Setup - app.json</a></li>\n<li><a href='#!/guide/storage_table-section-2'>Ext.azure.storage.Table</a></li>\n</ol>\n</div>\n\n<p>With a <a href=\"https://www.windowsazure.com/en-us/documentation/services/storage/\">Microsoft Azure Storage Account</a> you can store large amounts of unstructured data in the <a href=\"https://www.windowsazure.com/en-us/develop/net/how-to-guides/table-services/\">Table Storage Service</a>\nThe service is a NoSQL datastore which accepts authenticated calls from inside and outside the Microsoft Azure cloud. Microsoft Azure tables are ideal for storing structured, non-relational data.</p>\n\n<p>Currently, Microsoft Azure does not support cross-domain (CORS) requests to the Storage Services API. As a result,\n<strong><a href=\"#!/api/Ext.azure.storage.Table\" rel=\"Ext.azure.storage.Table\" class=\"docClass\">Ext.azure.storage.Table</a> will only work in a natively packaged application.</strong></p>\n\n<h2 id='storage_table-section-1'>Setup - app.json</h2>\n\n<p>In order to correctly sign the authentication headers for Azure, we first need to include an encryption library. <a href=\"#!/api/Ext.Azure\" rel=\"Ext.Azure\" class=\"docClass\">Ext.Azure</a> ships with CryptoJS for this very purpose.</p>\n\n<p>In your app.json file, simply add two files to your \"js\" array:</p>\n\n<pre><code>\"js\": [\n    {\n        \"path\": \"touch/sencha-touch.js\",\n        \"x-bootstrap\": true\n    },\n    {\n        \"path\": \"app.js\",\n        \"bundle\": true,  /* Indicates that all class dependencies are concatenated into this file when build */\n        \"update\": \"full\"\n    },\n\n    /* ADD THESE TWO ITEMS */\n    {\n        \"path\": \"path/to/azure/resources/CryptoJS v3.1.2/rollups/hmac-sha256.js\",\n        \"update\": \"full\"\n    },\n    {\n        \"path\": \"path/to/azure/resources/CryptoJS v3.1.2/components/enc-base64.js\",\n        \"update\": \"full\"\n    }\n],\n</code></pre>\n\n<p>With CryptoJS in place, the Azure Storage API can now be successfully authenticated via HTTP headers.</p>\n\n<h2 id='storage_table-section-2'>Ext.azure.storage.Table</h2>\n\n<p>The <a href=\"#!/api/Ext.azure.storage.Table\" rel=\"Ext.azure.storage.Table\" class=\"docClass\">Ext.azure.storage.Table</a> class acts as a wrapper for the <a href=\"http://msdn.microsoft.com/en-us/library/windowsazure/dd179423\">Azure Table Service REST API</a>.</p>\n\n<pre><code> var table = Ext.create('<a href=\"#!/api/Ext.azure.storage.Table\" rel=\"Ext.azure.storage.Table\" class=\"docClass\">Ext.azure.storage.Table</a>', {\n     accountName : 'YOUR_ACCOUNT_NAME',\n     accessKey   : 'YOUR_ACCESS_KEY'\n });\n\n table.createTable(\n      {\n          properties : [\n              {\n                  key : 'TableName', value : 'myTableName'\n              }\n          ]\n      },\n     function () {\n         console.log('success!')\n     },\n     function () {\n         console.log('failure... wah wah')\n     }\n );\n</code></pre>\n\n<p>Using <a href=\"#!/api/Ext.azure.storage.Table\" rel=\"Ext.azure.storage.Table\" class=\"docClass\">Ext.azure.storage.Table</a>, you can easily connect to the Azure Table Service and manage your data!</p>\n","title":"Table Storage"});