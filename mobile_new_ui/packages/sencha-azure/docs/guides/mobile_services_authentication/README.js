Ext.data.JsonP.mobile_services_authentication({"guide":"<h1>User Authentication</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/mobile_services_authentication-section-1'>Prerequisites</a></li>\n<li><a href='#!/guide/mobile_services_authentication-section-2'>Setting Up Authentication in Your Touch App</a></li>\n<li><a href='#!/guide/mobile_services_authentication-section-3'>Listening for Authentication Events</a></li>\n<li><a href='#!/guide/mobile_services_authentication-section-4'>Adding Authentication Credentials to data requests</a></li>\n<li><a href='#!/guide/mobile_services_authentication-section-5'>Web vs Hybrid</a></li>\n<li><a href='#!/guide/mobile_services_authentication-section-6'>Security Implications for autoSync Stores requiring Authentication</a></li>\n</ol>\n</div>\n\n<p><a href=\"http://www.windowsazure.com\">Microsoft Azure</a> mobile services allow you to secure your data by means of Authentication\nand allow you to provide different levels of authentication for your data tables.</p>\n\n<p>User Authentication is performed by allowing users to login to your application using their existing Microsoft Live,\nGoogle, Twitter or Facebook accounts.</p>\n\n<h2 id='mobile_services_authentication-section-1'>Prerequisites</h2>\n\n<p>Before continuing through this guide, be sure you have read the <a href=\"http://www.windowsazure.com/en-us/develop/mobile/tutorials/get-started-with-users-html/\">Getting Started with Authentication in Azure Mobile Services</a> guide and <a href=\"#!/guide/getting_started\">Getting Started with Ext.azure</a>.\nYou will need to understand these guides before you can integrate authentication into your Sencha application.</p>\n\n<p>In particular, you'll need to be sure to <a href=\"http://www.windowsazure.com/en-us/develop/mobile/tutorials/get-started-with-users-dotnet/#register\">register your app for authentication and configure Azure Mobile Services</a>.</p>\n\n<h2 id='mobile_services_authentication-section-2'>Setting Up Authentication in Your Touch App</h2>\n\n<p>In order to use Azure authentication services from within your application, you must configure the Azure package with\nthe services you wish to enable. As with other Azure configuration information, this is accomplished using the\n<a href=\"#!/api/Ext.Azure-method-init\" rel=\"Ext.Azure-method-init\" class=\"docClass\">Ext.Azure.init</a> method.</p>\n\n<p>Following the example configuration outlined in the <a href=\"/#!/guide/configuration\">Configuring Azure</a> guide, you must supply\nan array of authentication services you wish to enable using the <strong>authIdentities</strong> property. Valid values for the\nservice names are <strong>microsoft</strong>, <strong>facebook</strong>, <strong>twitter</strong>, and <strong>google</strong>.</p>\n\n<p>Here we have an example of an applicaton which has enable all authentication services for it:</p>\n\n<pre><code>Ext.application({\n    name : 'MyApp',\n\n    requires : [\n        '<a href=\"#!/api/Ext.Azure\" rel=\"Ext.Azure\" class=\"docClass\">Ext.azure.Azure</a>'\n    ],\n\n    azure : {\n        appKey : 'YOUR_APP_KEY',\n        appUrl : 'YOUR_APP_URL',\n\n        authIdentities : [\n            'microsoft',\n            'facebook',\n            'twitter',\n            'google'\n        ]\n    },\n\n    //...\n\n    launch: function() {\n\n        <a href=\"#!/api/Ext.Azure-method-init\" rel=\"Ext.Azure-method-init\" class=\"docClass\">Ext.Azure.init</a>(this.config.azure);\n\n    }\n});\n</code></pre>\n\n<p>Once configured with the Azure <strong>authIdentities</strong>, your application will immediately begin to handle the authentication lifecycle. Specifically:</p>\n\n<ul>\n<li><p>You can prompt users to login using <strong><a href=\"#!/api/Ext.azure.Authentication-method-login\" rel=\"Ext.azure.Authentication-method-login\" class=\"docClass\">Ext.azure.Authentication.login</a>()</strong> or by creating an instance of <strong>Ext.azure.AuthOptions</strong>.\n  On successful login, authentication tokens are stored in localStorage</p></li>\n<li><p>You can log users out using <strong><a href=\"#!/api/Ext.azure.Authentication-method-logout\" rel=\"Ext.azure.Authentication-method-logout\" class=\"docClass\">Ext.azure.Authentication.logout</a>()</strong></p></li>\n<li><p>The application will automatically check to see if authentication tokens exist in localStorage at startup.</p></li>\n</ul>\n\n\n<h2 id='mobile_services_authentication-section-3'>Listening for Authentication Events</h2>\n\n<p>If you wish your application to listen for authentication events, the following three events are available :</p>\n\n<ul>\n<li><strong>authenticationfailure</strong> an attempted authentication has failed</li>\n<li><strong>authenticationsuccess</strong> user has been successfully authenticated</li>\n<li><strong>authenticationlogout</strong> user has logged out of application and is no longer authenticated</li>\n</ul>\n\n\n<p>You can configure your application to listen and react to these events as follows :</p>\n\n<pre><code>Ext.Azure.on({\n    'authenticationfailure': function() {\n        // do something here\n    }\n});\n</code></pre>\n\n<h2 id='mobile_services_authentication-section-4'>Adding Authentication Credentials to data requests</h2>\n\n<p>Azure allows you to configure your data services to be secure, that is, requiring a user to be authenticated before\nany read, write, insert or delete actions are performed on data records. To utilize this feature, you need to configure\nthe Azure data proxy to send authentication information with each request.</p>\n\n<p>By setting the property <strong>useHeaderAuthentication</strong> to <strong>true</strong>, the Azure data proxy will automatically add\nauthentication credentials to CRUD operations.</p>\n\n<pre><code>    proxy : {\n        type : 'azure',\n        tableName               : 'TodoItem',\n        useHeaderAuthentication : true\n    }\n</code></pre>\n\n<p><strong>Note</strong>: It is your responsibility as the developer to restrict table permissions in your Azure portal as needed.</p>\n\n<h2 id='mobile_services_authentication-section-5'>Web vs Hybrid</h2>\n\n<p>Be aware that the Azure API uses <a href=\"http://en.wikipedia.org/wiki/OAuth\">oAuth 2.0</a> for authentication which, in the case\nof <a href=\"#!/api/Ext.Azure\" rel=\"Ext.Azure\" class=\"docClass\">Ext.Azure</a>, means that authentication is handled via a new browser window.</p>\n\n<p>The Ext.azure.AuthOptions class (as well as <strong><a href=\"#!/api/Ext.azure.Authentication-method-login\" rel=\"Ext.azure.Authentication-method-login\" class=\"docClass\">Ext.azure.Authentication.login</a>()</strong>) automatically handles the cross-frame\ncommunication of passing authentication tokens.</p>\n\n<p>If you're using PhoneGap/Cordova to build your hybrid application, you will be required to include the <a href=\"http://cordova.apache.org/docs/en/2.8.0/cordova_inappbrowser_inappbrowser.md.html#InAppBrowser\">InAppBrowser</a>\nplugin to facilitate the creation of a new browser window for login.</p>\n\n<h2 id='mobile_services_authentication-section-6'>Security Implications for autoSync Stores requiring Authentication</h2>\n\n<p>It is assumed that if your applicaton requires authentication to access the data in your Azure mobile services tables,\nit would be desirable to clear out all the stores of their data when a user logs out.</p>\n\n<p>Logically, this clearing of data would be performed by a listener that is listening for the <strong>authenticationlogout</strong> event.\nIf your application uses a store with <strong>autoSync: true</strong>, be aware of some quirks you will need to handle.</p>\n\n<p>When a store is set to autoSync, any action performed on the store is automatically relayed to the remote data service,\nincluding actions such as the deletion of records. This leaves us with a situation where it is desired to delete all the\nrecords in a store, yet not relay this action to the remote service.</p>\n\n<p>In the code below, we <strong>temporarily disable</strong> the syncing of the store in order to remove the records locally; we don't\nwant to sync these DELETE operations to the remote API!</p>\n\n<p>Additionally, we have to manually reset the store's internal count of removed records so that these aren't accidentally\nsynced (i.e. deleted) when the store makes subsequent requests to the remote API.</p>\n\n<pre><code>onAuthLogout : function() {\n    var store = Ext.getStore('TodoItems');\n\n    // Turn off autoSync \n\n    store.setAutoSync(false);\n\n    // Remove records from store \n\n    store.removeAll();\n\n    // Manually reset the internal removed property so these aren't accidentally synced later\n\n    store.removed = []; \n\n    // Turn back on autoSync\n\n    store.setAutoSync(true);\n\n    this.getLogoutButton().hide();\n    this.getLoginButton().show();\n\n    Ext.Viewport.setMasked(false);\n}\n</code></pre>\n\n<p>It is strongly suggested you thoroughly test your code to ensure that you are not accidentally removing important\ninformation from your mobile services tables.</p>\n","title":"User Authentication"});