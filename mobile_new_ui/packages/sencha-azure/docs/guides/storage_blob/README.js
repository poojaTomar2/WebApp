Ext.data.JsonP.storage_blob({"guide":"<h1>Azure Storage: Blob Storage REST APIs</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/storage_blob-section-1'>Setup - app.json</a></li>\n<li><a href='#!/guide/storage_blob-section-2'>Ext.azure.storage.Blob</a></li>\n</ol>\n</div>\n\n<p><a href=\"https://www.windowsazure.com/en-us/develop/net/how-to-guides/blob-storage/\">Microsoft Azure Blob storage</a> is a service for storing large amounts of unstructured data that can be accessed from anywhere in the world via HTTP or HTTPS. A single blob can be hundreds of gigabytes in size, and a single storage account can contain up to 100TB of blobs.</p>\n\n<p>Currently, Microsoft Azure does not support cross-domain (CORS) requests to the Storage Services API. As a result,\n<strong><a href=\"#!/api/Ext.azure.storage.Blob\" rel=\"Ext.azure.storage.Blob\" class=\"docClass\">Ext.azure.storage.Blob</a> will only work in a natively packaged application.</strong></p>\n\n<h2 id='storage_blob-section-1'>Setup - app.json</h2>\n\n<p>In order to correctly sign the authentication headers for Azure, we first need to include an encryption library. <a href=\"#!/api/Ext.Azure\" rel=\"Ext.Azure\" class=\"docClass\">Ext.Azure</a> ships with CryptoJS for this very purpose.</p>\n\n<p>In your app.json file, simply add two files to your \"js\" array:</p>\n\n<pre><code>\"js\": [\n    {\n        \"path\": \"touch/sencha-touch.js\",\n        \"x-bootstrap\": true\n    },\n    {\n        \"path\": \"app.js\",\n        \"bundle\": true,  /* Indicates that all class dependencies are concatenated into this file when build */\n        \"update\": \"full\"\n    },\n\n    /* ADD THESE TWO ITEMS */\n    {\n        \"path\": \"path/to/azure/resources/CryptoJS v3.1.2/rollups/hmac-sha256.js\",\n        \"update\": \"full\"\n    },\n    {\n        \"path\": \"path/to/azure/resources/CryptoJS v3.1.2/components/enc-base64.js\",\n        \"update\": \"full\"\n    }\n],\n</code></pre>\n\n<p>With CryptoJS in place, the Azure Storage API can now be successfully authenticated via HTTP headers.</p>\n\n<h2 id='storage_blob-section-2'>Ext.azure.storage.Blob</h2>\n\n<p>The <a href=\"#!/api/Ext.azure.storage.Blob\" rel=\"Ext.azure.storage.Blob\" class=\"docClass\">Ext.azure.storage.Blob</a> class acts as a wrapper for the <a href=\"http://msdn.microsoft.com/en-us/library/windowsazure/dd135733.aspx\">Azure Blob Service REST API</a>.</p>\n\n<pre><code> var blob = Ext.create('<a href=\"#!/api/Ext.azure.storage.Blob\" rel=\"Ext.azure.storage.Blob\" class=\"docClass\">Ext.azure.storage.Blob</a>', {\n     accountName : 'YOUR_ACCOUNT_NAME',\n     accessKey   : 'YOUR_ACCESS_KEY'\n });\n\n blob.listContainers(\n     {}, //optional parameters for the request\n     function () {\n         console.log('success!')\n     },\n     function () {\n         console.log('failure... wah wah')\n     }\n );\n</code></pre>\n\n<p>Using <a href=\"#!/api/Ext.azure.storage.Blob\" rel=\"Ext.azure.storage.Blob\" class=\"docClass\">Ext.azure.storage.Blob</a>, you can easily connect to the Azure Blob Service and manage your data!</p>\n","title":"Blob Storage"});