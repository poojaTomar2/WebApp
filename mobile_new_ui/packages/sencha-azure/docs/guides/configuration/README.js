Ext.data.JsonP.configuration({"guide":"<h1>Configuring Azure</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/configuration-section-1'>Prerequisites</a></li>\n<li><a href='#!/guide/configuration-section-2'>Sencha Touch vs Ext JS</a></li>\n<li><a href='#!/guide/configuration-section-3'>Basic Azure Initialization</a></li>\n<li><a href='#!/guide/configuration-section-4'>Configuring the Azure data proxy</a></li>\n</ol>\n</div>\n\n<p>Once you have successfully downloaded and installed the Azure extension and included it in your application, the final\nstep is to supply your application with your Azure mobile service access credentials.</p>\n\n<h2 id='configuration-section-1'>Prerequisites</h2>\n\n<p>Before continuing with this section, you are required to have already setup an Azure mobile service that your application will be using.</p>\n\n<p>When you create a mobile service in Azure (see <a href=\"#!/guide/getting_started\">Getting Started with Azure</a>) an application\nkey and URL will be assigned to that service. This information must be provided to your Azure package so it can\nconnect to your service.</p>\n\n<h2 id='configuration-section-2'>Sencha Touch vs Ext JS</h2>\n\n<p>The <em>Sencha Extensions for Microsoft Azure</em> were originally developed for Sencha Touch, but are now also compatible\nwith Ext JS 5.</p>\n\n<p>Because of small differences in the Ext.Appliction() API between Sench Touch an Ext JS, you should be aware of the proper\nconfiguration of <a href=\"#!/api/Ext.Azure\" rel=\"Ext.Azure\" class=\"docClass\">Ext.Azure</a> in both frameworks.</p>\n\n<p>In Sencha Touch:</p>\n\n<pre><code>Ext.application({\n    name: 'MyApp',\n\n    requires: [ '<a href=\"#!/api/Ext.Azure\" rel=\"Ext.Azure\" class=\"docClass\">Ext.azure.Azure</a>' ],\n\n    azure: {\n        appKey: 'myazureservice-access-key',\n        appUrl: 'myazure-service.azure-mobile.net'\n    },\n\n    launch: function() {\n\n        // Call Azure initialization\n\n        <a href=\"#!/api/Ext.Azure-method-init\" rel=\"Ext.Azure-method-init\" class=\"docClass\">Ext.Azure.init</a>(this.config.azure);\n\n    }\n});\n</code></pre>\n\n<p>In Ext JS 5:</p>\n\n<pre><code>Ext.application({\n    name: 'MyApp',\n\n    requires: [ '<a href=\"#!/api/Ext.Azure\" rel=\"Ext.Azure\" class=\"docClass\">Ext.azure.Azure</a>' ],\n\n    // NOTE: WE WRAP azure INSIDE config WHEN USING EXT JS 5\n    config : {\n        azure: {\n            appKey: 'myazureservice-access-key',\n            appUrl: 'myazure-service.azure-mobile.net'\n        },\n    },\n\n    launch: function() {\n\n        // Call Azure initialization\n\n        <a href=\"#!/api/Ext.Azure-method-init\" rel=\"Ext.Azure-method-init\" class=\"docClass\">Ext.Azure.init</a>(this.config.azure);\n\n    }\n});\n</code></pre>\n\n<p>As we can see, the APIs are nearly identical -- but Ext JS 5 requires an additional layer of nesting our <em>azure</em> object\ninside the <em>config</em> object.</p>\n\n<p><strong>Most of the examples in the API documentation and guides for this extension will follow the Sencha Touch convention\nrelating to Ext.Appliction() for simplicity and consistency.</strong> All of the other code samples should be identical between\nSencha Touch and Ext JS 5.</p>\n\n<h2 id='configuration-section-3'>Basic Azure Initialization</h2>\n\n<p>The Azure package is initialized by calling the <strong><a href=\"#!/api/Ext.Azure-method-init\" rel=\"Ext.Azure-method-init\" class=\"docClass\">Ext.Azure.init</a></strong> method in the launch section of your application.\nThis method is passed a configuration object containing mobile service creditials as well as other creditials and\nfeatures you wish to utilize.</p>\n\n<p>While you can pass the configuration object directly to the init method, we suggest creating a Sencha application\nconfiguration property called <strong>azure</strong> and placing all the appropriate information there. You can then pass this\nproperty value to the <a href=\"#!/api/Ext.Azure-method-init\" rel=\"Ext.Azure-method-init\" class=\"docClass\">Ext.Azure.init</a> method.</p>\n\n<p>This example shows a very simple Azure configuration and initialization supplying only the application key and URL.\nYou would, of course, be providing the actual key and url for your mobile service in place of the example values shows here:</p>\n\n<pre><code>Ext.application({\n    name: 'MyApp',\n\n    requires: [ '<a href=\"#!/api/Ext.Azure\" rel=\"Ext.Azure\" class=\"docClass\">Ext.azure.Azure</a>' ],\n\n    azure: {\n        appKey: 'myazureservice-access-key',\n        appUrl: 'myazure-service.azure-mobile.net'\n    },\n\n    launch: function() {\n\n        // Call Azure initialization\n\n        <a href=\"#!/api/Ext.Azure-method-init\" rel=\"Ext.Azure-method-init\" class=\"docClass\">Ext.Azure.init</a>(this.config.azure);\n\n    }\n});\n</code></pre>\n\n<p>For more detailed information on the Azure configuration options, please consult the <a href=\"#!/api/Ext.Azure\" rel=\"Ext.Azure\" class=\"docClass\">Ext.Azure</a> API documentation.</p>\n\n<h2 id='configuration-section-4'>Configuring the Azure data proxy</h2>\n\n<p>Providing the application key and URL allows your application to connect to the service. However it does not provide\nany information about the service itself and tables within the service that are available to your application.</p>\n\n<p>You provide table information by configuring data proxies in your application models or stores. The proxy only needs\nto be set to type <strong>azure</strong> and be provided with a service tablename. The model fields are used to identify the\ncolumns you created in your Azure mobile service table.</p>\n\n<p>In this example, we configure our data model with an Azure proxy and specify a <strong>tableName</strong> of 'ToDoItem'.\nThe <strong>tableName</strong> config tells the proxy which Azure database table to use.</p>\n\n<pre><code>    Ext.define('MyApp.model.TodoItem', {\n        extend : 'Ext.data.Model',\n\n        requires : [\n            '<a href=\"#!/api/Ext.azure.Proxy\" rel=\"Ext.azure.Proxy\" class=\"docClass\">Ext.azure.Proxy</a>'\n        ],\n\n        config : {\n            idProperty : 'id',\n            fields     : [\n                {\n                    name : 'id',\n                    type : 'int'\n                },\n                {\n                    name : 'text',\n                    type : 'string'\n                },\n                {\n                    name : 'complete',\n                    type : 'boolean'\n                }\n            ],\n\n            proxy : {\n                type        : 'azure',\n                tablename   : 'TodoItem'\n            }\n        }\n    });\n</code></pre>\n\n<p>The Azure proxy will automatically set all HTTP headers with the appropriate CRUD operations expected by the\nAzure API (including authentication credentials, if they exist).</p>\n\n<p>Congratulations! Your application should now have access to your Azure mobile service.</p>\n","title":"Configuring Azure"});