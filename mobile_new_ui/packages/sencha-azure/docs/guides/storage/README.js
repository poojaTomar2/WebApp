Ext.data.JsonP.storage({"guide":"<h1>Walkthrough: Storage Services example</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/storage-section-1'>Notes</a></li>\n<li><a href='#!/guide/storage-section-2'>app.json</a></li>\n<li><a href='#!/guide/storage-section-3'>app.js</a></li>\n<li><a href='#!/guide/storage-section-4'>app/controller/Table.js</a></li>\n<li><a href='#!/guide/storage-section-5'>app/controller/Blob.js</a></li>\n</ol>\n</div>\n\n<p>The Storage sample application is a bare-bones example demonstrating the simplest parts\nof the Azure Storage Services API. You can view the full source code in the download package\nby opening the /examples/storage/TouchApp folder.</p>\n\n<h2 id='storage-section-1'>Notes</h2>\n\n<p>Currently, Microsoft Azure does not support cross-domain (CORS) requests to the Storage Services API As a result, <a href=\"#!/api/Ext.azure.storage.Table\" rel=\"Ext.azure.storage.Table\" class=\"docClass\">Ext.azure.storage.Table</a> and <a href=\"#!/api/Ext.azure.storage.Blob\" rel=\"Ext.azure.storage.Blob\" class=\"docClass\">Ext.azure.storage.Blob</a> will <strong>only work in a natively packaged application</strong>.</p>\n\n<h2 id='storage-section-2'>app.json</h2>\n\n<p>In order to connect to the Azure Storage Services, <a href=\"#!/api/Ext.Azure\" rel=\"Ext.Azure\" class=\"docClass\">Ext.Azure</a> requires a third-party encryption library: CryptoJS.</p>\n\n<p>This library ships with the <a href=\"#!/api/Ext.Azure\" rel=\"Ext.Azure\" class=\"docClass\">Ext.Azure</a> download -- but needs to be manually included in your app.json file.</p>\n\n<pre><code>\"js\": [\n    {\n        \"path\": \"touch/sencha-touch.js\",\n        \"x-bootstrap\": true\n    },\n    {\n        \"path\": \"bootstrap.js\",\n        \"x-bootstrap\": true\n    },\n    {\n        \"path\": \"app.js\",\n        \"bundle\": true,  /* Indicates that all class dependencies are concatenated into this file when build */\n        \"update\": \"delta\"\n    },\n\n    /* INCLUDE THESE TWO FILES */\n    {\n        \"path\": \"packages/touch-azure/resources/CryptoJS v3.1.2/rollups/hmac-sha256.js\",\n        \"update\": \"full\"\n    },\n    {\n        \"path\": \"packages/touch-azure/resources/CryptoJS v3.1.2/components/enc-base64.js\",\n        \"update\": \"full\"\n    }\n],\n</code></pre>\n\n<h2 id='storage-section-3'>app.js</h2>\n\n<p>In app.js, you'll notice is that we set the Ext.Loader paths:</p>\n\n<pre><code>Ext.Loader.setConfig({\n    enabled : true,\n    paths   : {\n        'Ext'       : 'touch/src',\n        'Ext.azure' : 'packages/touch-azure/src'\n    }\n});\n</code></pre>\n\n<p>Next, we include <a href=\"#!/api/Ext.Azure\" rel=\"Ext.Azure\" class=\"docClass\">Ext.azure.Azure</a> in our Ext.application():</p>\n\n<pre><code>Ext.application({\n    name : 'Storage',\n\n    requires : [\n        'Ext.MessageBox',\n        '<a href=\"#!/api/Ext.Azure\" rel=\"Ext.Azure\" class=\"docClass\">Ext.azure.Azure</a>'\n    ],\n\n    //...\n\n});\n</code></pre>\n\n<p>One other thing you'll notice is that we didn't configure any of the standard <strong><a href=\"#!/api/Ext.Azure\" rel=\"Ext.Azure\" class=\"docClass\">Ext.azure.Azure</a></strong> bits, or call <strong><a href=\"#!/api/Ext.Azure-method-init\" rel=\"Ext.Azure-method-init\" class=\"docClass\">Ext.Azure.init</a>()</strong>. The Microsoft Azure Storage Services don't use the same account/key as the Mobile Services, so we will configure the account/key directly on the Storage classes.</p>\n\n<h2 id='storage-section-4'>app/controller/Table.js</h2>\n\n<p>Inside our Table controller we see a number of event handlers - one for each button on the \"Table Storage\" tab. Additionally, we see a <strong>launch()</strong> method which configures our Azure Table Storage account:</p>\n\n<pre><code>launch : function () {\n    this.table = Ext.create('<a href=\"#!/api/Ext.azure.storage.Table\" rel=\"Ext.azure.storage.Table\" class=\"docClass\">Ext.azure.storage.Table</a>', {\n        accountName : 'YOUR_ACCOUNT_NAME',\n        accessKey   : 'YOUR_ACCOUNT_KEY'\n    });\n},\n</code></pre>\n\n<p>Next we'll take a look at how the <a href=\"#!/api/Ext.azure.storage.Table\" rel=\"Ext.azure.storage.Table\" class=\"docClass\">Ext.azure.storage.Table</a> class connects to the Storage Services API. For example, querying the list of tables currently in our Storage account:</p>\n\n<pre><code>onQueryTablesTap : function () {\n    this.table.queryTables(\n        {},\n        this.successHandler,\n        this.failureHandler\n    );\n},\n</code></pre>\n\n<p><a href=\"#!/api/Ext.azure.storage.Table\" rel=\"Ext.azure.storage.Table\" class=\"docClass\">Ext.azure.storage.Table</a> automatically sets the correct HTTP headers and formats any data to be sent to the Azure Storage API.</p>\n\n<h2 id='storage-section-5'>app/controller/Blob.js</h2>\n\n<p>Inside our Blob controller we see a number of event handlers - one for each button on the \"Blob Storage\" tab. Additionally, we see a <strong>launch()</strong> method which configures our Azure Blob Storage account:</p>\n\n<pre><code>launch : function () {\n    this.blob = Ext.create('<a href=\"#!/api/Ext.azure.storage.Blob\" rel=\"Ext.azure.storage.Blob\" class=\"docClass\">Ext.azure.storage.Blob</a>', {\n        accountName : 'YOUR_ACCOUNT_NAME',\n        accessKey   : 'YOUR_ACCOUNT_KEY'\n    });\n},\n</code></pre>\n\n<p>Next we'll take a look at how the <a href=\"#!/api/Ext.azure.storage.Blob\" rel=\"Ext.azure.storage.Blob\" class=\"docClass\">Ext.azure.storage.Blob</a> class connects to the Storage Services API. For example, querying the list of containers currently in our Storage account:</p>\n\n<pre><code>onListContainersTap : function () {\n    this.blob.listContainers(\n        {},\n        this.successHandler,\n        this.failureHandler\n    );\n},\n</code></pre>\n\n<p><a href=\"#!/api/Ext.azure.storage.Blob\" rel=\"Ext.azure.storage.Blob\" class=\"docClass\">Ext.azure.storage.Blob</a> automatically sets the correct HTTP headers and formats any data to be sent to the Azure Storage API.</p>\n","title":"Storage Services: Table and Blob Storage APIs"});