Ext.data.JsonP.data_basic({"guide":"<h1>Walkthrough: Mobile Services \"data\" - Basic example</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/data_basic-section-1'>app.js</a></li>\n<li><a href='#!/guide/data_basic-section-2'>app/model/TodoItem.js</a></li>\n<li><a href='#!/guide/data_basic-section-3'>app/controller/Main.js</a></li>\n</ol>\n</div>\n\n<p>The <a href=\"#!/example/Basic\">Basic</a> sample application is a bare-bones example demonstrating the simplest parts of the Azure Mobile Services API - connecting to data. You can view the full source code in the download package by opening the /examples/data/Basic folder.</p>\n\n<h2 id='data_basic-section-1'>app.js</h2>\n\n<p>The first thing you'll notice is that we set the Ext.Loader paths so that Sencha Touch can find the source files for the Ext.azure classes:</p>\n\n<pre><code>Ext.Loader.setConfig({\n    enabled : true,\n    paths   : {\n        'Ext'       : 'touch/src',\n        'Ext.azure' : 'packages/touch-azure/src'\n    }\n});\n</code></pre>\n\n<p>Next, we need to configure Azure for our application. In this example we created an application configuration property called <strong>azure</strong>, and then passed that property to <a href=\"#!/api/Ext.Azure-method-init\" rel=\"Ext.Azure-method-init\" class=\"docClass\">Ext.Azure.init</a>.</p>\n\n<p>You can also provide a configuration object directly to <a href=\"#!/api/Ext.Azure-method-init\" rel=\"Ext.Azure-method-init\" class=\"docClass\">Ext.Azure.init</a>, but creating an application property object as shown below allows you to easily locate the Azure configuration values for updates or additions :</p>\n\n<pre><code>Ext.application({\n    name : 'Basic',\n\n    requires : [\n        'Ext.MessageBox',\n        '<a href=\"#!/api/Ext.Azure\" rel=\"Ext.Azure\" class=\"docClass\">Ext.azure.Azure</a>'\n    ],\n\n    //...\n\n    azure : {\n        appUrl : 'YOUR-APP-URL',\n        appKey : 'YOUR-APP-KEY'\n    },\n\n    //...\n\n    launch : function () {\n        // Destroy the #appLoadingIndicator element\n        Ext.fly('appLoadingIndicator').destroy();\n\n        // Initialize Azure\n        <a href=\"#!/api/Ext.Azure-method-init\" rel=\"Ext.Azure-method-init\" class=\"docClass\">Ext.Azure.init</a>(this.config.azure);\n\n        // Initialize the main view\n        Ext.Viewport.add(Ext.create('Basic.view.Main'));\n    },\n\n    //...\n\n});\n</code></pre>\n\n<p>The important parts:</p>\n\n<ul>\n<li>adding <a href=\"#!/api/Ext.Azure\" rel=\"Ext.Azure\" class=\"docClass\">Ext.azure.Azure</a> to the <strong>requires</strong> block</li>\n<li>adding the <strong>azure</strong> config object with your <em>appKey</em> and <em>appUrl</em></li>\n<li>calling <a href=\"#!/api/Ext.Azure-method-init\" rel=\"Ext.Azure-method-init\" class=\"docClass\">Ext.Azure.init</a>() inside your launch() method</li>\n</ul>\n\n\n<h2 id='data_basic-section-2'>app/model/TodoItem.js</h2>\n\n<p>We must also set the correct proxy on our data model (or store). In our example, we chose to place the proxy on the Model:</p>\n\n<pre><code>Ext.define('Basic.model.TodoItem', {\n\n    //...\n\n    proxy : {\n        type               : 'azure',\n        tableName          : 'TodoItem',\n        enablePagingParams : true\n    }\n});\n</code></pre>\n\n<p>Be sure that the <em>tableName</em> property matches the name of the table you defined in your Azure Mobile Services portal!</p>\n\n<h2 id='data_basic-section-3'>app/controller/Main.js</h2>\n\n<p>The premise of this sample app is showcase the basic CRUD operations available in the Azure Mobile Services API:</p>\n\n<ul>\n<li>add new items to the TodoItem table (CREATE)</li>\n<li>list items in the TodoItem table (READ)</li>\n<li>update existing items in the TodoItem table (UPDATE - double-tap on any record in the list)</li>\n<li>remove items from the TodoItem table (DELETE - single-tap on any record in the list)</li>\n</ul>\n\n\n<p>Our <em>Main.js</em> controller handles each of these operations in separate handlers.</p>\n\n<p>For example, adding a new TodoItem:</p>\n\n<pre><code>onAddItem : function () {\n    var me = this,\n        rec,\n        store = Ext.getStore('TodoItems'),\n        field = me.getTodoField(),\n        value = field.getValue();\n\n    if (value === '') {\n        Ext.Msg.alert('Error', 'Please enter Task name', Ext.emptyFn);\n    }\n    else {\n        rec = Ext.create('Basic.model.TodoItem', {complete : false, text : value});\n        store.insert(0, rec); //insert at the top\n        field.setValue('');\n    }\n}\n</code></pre>\n\n<p>By simply adding, removing, or editing a record in the data store the <a href=\"#!/api/Ext.azure.Proxy\" rel=\"Ext.azure.Proxy\" class=\"docClass\">Ext.azure.Proxy</a> automatically handles\nthe appropriate REST call and synchronizes your data with the remote database. It's that easy!</p>\n","title":"Mobile Services: Data API"});